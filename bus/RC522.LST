C51 COMPILER V9.01   RC522                                                                 06/02/2017 08:42:48 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN RC522.OBJ
COMPILER INVOKED BY: D:\windows\Keil_C51\C51\BIN\C51.EXE RC522.C LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <intrins.h>
   2          #include<reg52.h>
   3          //#include "main.h"
   4          #include "mfrc522.h"
   5          
   6          #define MAXRLEN 18
   7                           
   8          
   9          
  10                     
  11          /////////////////////////////////////////////////////////////////////
  12          //功    能：寻卡
  13          //参数说明: req_code[IN]:寻卡方式
  14          //                0x52 = 寻感应区内所有符合14443A标准的卡
  15          //                0x26 = 寻未进入休眠状态的卡
  16          //          pTagType[OUT]：卡片类型代码
  17          //                0x4400 = Mifare_UltraLight
  18          //                0x0400 = Mifare_One(S50)
  19          //                0x0200 = Mifare_One(S70)
  20          //                0x0800 = Mifare_Pro(X)
  21          //                0x4403 = Mifare_DESFire
  22          //返    回: 成功返回MI_OK
  23          /////////////////////////////////////////////////////////////////////
  24          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
  25          {
  26   1         char status;  
  27   1         unsigned int  unLen;
  28   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  29   1      
  30   1         ClearBitMask(Status2Reg,0x08);
  31   1         WriteRawRC(BitFramingReg,0x07);
  32   1         SetBitMask(TxControlReg,0x03);
  33   1       
  34   1         ucComMF522Buf[0] = req_code;
  35   1      
  36   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  37   1         
  38   1         if ((status == MI_OK) && (unLen == 0x10))
  39   1         {    
  40   2             *pTagType     = ucComMF522Buf[0];
  41   2             *(pTagType+1) = ucComMF522Buf[1];
  42   2         }
  43   1         else
  44   1         {   
  45   2                      status = MI_ERR;  
  46   2              }
  47   1         
  48   1         return status;
  49   1      }
  50          
  51          /////////////////////////////////////////////////////////////////////
  52          //功    能：防冲撞
  53          //参数说明: pSnr[OUT]:卡片序列号，4字节
  54          //返    回: 成功返回MI_OK
  55          /////////////////////////////////////////////////////////////////////  
C51 COMPILER V9.01   RC522                                                                 06/02/2017 08:42:48 PAGE 2   

  56          char PcdAnticoll(unsigned char *pSnr)
  57          {
  58   1          char status;
  59   1          unsigned char i,snr_check=0;
  60   1          unsigned int  unLen;
  61   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  62   1          
  63   1      
  64   1          ClearBitMask(Status2Reg,0x08);
  65   1          WriteRawRC(BitFramingReg,0x00);
  66   1          ClearBitMask(CollReg,0x80);
  67   1       
  68   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  69   1          ucComMF522Buf[1] = 0x20;
  70   1      
  71   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  72   1      
  73   1          if (status == MI_OK)
  74   1          {
  75   2               for (i=0; i<4; i++)
  76   2               {   
  77   3                   *(pSnr+i)  = ucComMF522Buf[i];
  78   3                   snr_check ^= ucComMF522Buf[i];
  79   3      
  80   3               }
  81   2               if (snr_check != ucComMF522Buf[i])
  82   2               {   status = MI_ERR;    }
  83   2          }
  84   1          
  85   1          SetBitMask(CollReg,0x80);
  86   1          return status;
  87   1      }
  88          
  89          /////////////////////////////////////////////////////////////////////
  90          //功    能：选定卡片
  91          //参数说明: pSnr[IN]:卡片序列号，4字节
  92          //返    回: 成功返回MI_OK
  93          /////////////////////////////////////////////////////////////////////
  94          char PcdSelect(unsigned char *pSnr)
  95          {
  96   1          char status;
  97   1          unsigned char i;
  98   1          unsigned int  unLen;
  99   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 100   1          
 101   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
 102   1          ucComMF522Buf[1] = 0x70;
 103   1          ucComMF522Buf[6] = 0;
 104   1          for (i=0; i<4; i++)
 105   1          {
 106   2              ucComMF522Buf[i+2] = *(pSnr+i);
 107   2              ucComMF522Buf[6]  ^= *(pSnr+i);
 108   2          }
 109   1          CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
 110   1        
 111   1          ClearBitMask(Status2Reg,0x08);
 112   1      
 113   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
 114   1          
 115   1          if ((status == MI_OK) && (unLen == 0x18))
 116   1          {   status = MI_OK;  }
 117   1          else
C51 COMPILER V9.01   RC522                                                                 06/02/2017 08:42:48 PAGE 3   

 118   1          {   status = MI_ERR;    }
 119   1      
 120   1          return status;
 121   1      }
 122          
 123          /////////////////////////////////////////////////////////////////////
 124          //功    能：验证卡片密码
 125          //参数说明: auth_mode[IN]: 密码验证模式
 126          //                 0x60 = 验证A密钥
 127          //                 0x61 = 验证B密钥 
 128          //          addr[IN]：块地址
 129          //          pKey[IN]：密码
 130          //          pSnr[IN]：卡片序列号，4字节
 131          //返    回: 成功返回MI_OK
 132          /////////////////////////////////////////////////////////////////////               
 133          /*char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr)
 134          {
 135              char status;
 136              unsigned int  unLen;
 137              unsigned char i,ucComMF522Buf[MAXRLEN]; 
 138          
 139              ucComMF522Buf[0] = auth_mode;
 140              ucComMF522Buf[1] = addr;
 141              for (i=0; i<6; i++)
 142              {    ucComMF522Buf[i+2] = *(pKey+i);   }
 143              for (i=0; i<6; i++)
 144              {    ucComMF522Buf[i+8] = *(pSnr+i);   }
 145           //   memcpy(&ucComMF522Buf[2], pKey, 6); 
 146           //   memcpy(&ucComMF522Buf[8], pSnr, 4); 
 147              
 148              status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
 149              if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
 150              {   status = MI_ERR;   }
 151              
 152              return status;
 153          }
 154          */
 155          /////////////////////////////////////////////////////////////////////
 156          //功    能：读取M1卡一块数据
 157          //参数说明: addr[IN]：块地址
 158          //          pData[OUT]：读出的数据，16字节
 159          //返    回: 成功返回MI_OK
 160          ///////////////////////////////////////////////////////////////////// 
 161          char PcdRead(unsigned char addr,unsigned char *pData)
 162          {
 163   1          char status;
 164   1          unsigned int  unLen;
 165   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 166   1      
 167   1          ucComMF522Buf[0] = PICC_READ;
 168   1          ucComMF522Buf[1] = addr;
 169   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 170   1         
 171   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 172   1          if ((status == MI_OK) && (unLen == 0x90))
 173   1       //   {   memcpy(pData, ucComMF522Buf, 16);   }
 174   1          {
 175   2              for (i=0; i<16; i++)
 176   2              {    *(pData+i) = ucComMF522Buf[i];   }
 177   2          }
 178   1          else
 179   1          {   status = MI_ERR;   }
C51 COMPILER V9.01   RC522                                                                 06/02/2017 08:42:48 PAGE 4   

 180   1          
 181   1          return status;
 182   1      }
 183          
 184          /////////////////////////////////////////////////////////////////////
 185          //功    能：写数据到M1卡一块
 186          //参数说明: addr[IN]：块地址
 187          //          pData[IN]：写入的数据，16字节
 188          //返    回: 成功返回MI_OK
 189          /////////////////////////////////////////////////////////////////////                  
 190          char PcdWrite(unsigned char addr,unsigned char *pData)
 191          {
 192   1          char status;
 193   1          unsigned int  unLen;
 194   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 195   1          
 196   1          ucComMF522Buf[0] = PICC_WRITE;
 197   1          ucComMF522Buf[1] = addr;
 198   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 199   1       
 200   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 201   1      
 202   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 203   1          {   status = MI_ERR;   }
 204   1              
 205   1          if (status == MI_OK)
 206   1          {
 207   2              //memcpy(ucComMF522Buf, pData, 16);
 208   2              for (i=0; i<16; i++)
 209   2              {    ucComMF522Buf[i] = *(pData+i);   }
 210   2              CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
 211   2      
 212   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,18,ucComMF522Buf,&unLen);
 213   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 214   2              {   status = MI_ERR;   }
 215   2          }
 216   1          
 217   1          return status;
 218   1      }
 219          
 220          /////////////////////////////////////////////////////////////////////
 221          //功    能：扣款和充值
 222          //参数说明: dd_mode[IN]：命令字
 223          //               0xC0 = 扣款
 224          //               0xC1 = 充值
 225          //          addr[IN]：钱包地址
 226          //          pValue[IN]：4字节增(减)值，低位在前
 227          //返    回: 成功返回MI_OK
 228          /////////////////////////////////////////////////////////////////////                 
 229          /*char PcdValue(unsigned char dd_mode,unsigned char addr,unsigned char *pValue)
 230          {
 231              char status;
 232              unsigned int  unLen;
 233              unsigned char i,ucComMF522Buf[MAXRLEN]; 
 234              
 235              ucComMF522Buf[0] = dd_mode;
 236              ucComMF522Buf[1] = addr;
 237              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 238           
 239              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 240          
 241              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
C51 COMPILER V9.01   RC522                                                                 06/02/2017 08:42:48 PAGE 5   

 242              {   status = MI_ERR;   }
 243                  
 244              if (status == MI_OK)
 245              {
 246                 // memcpy(ucComMF522Buf, pValue, 4);
 247                  for (i=0; i<16; i++)
 248                  {    ucComMF522Buf[i] = *(pValue+i);   }
 249                  CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 250                  unLen = 0;
 251                  status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 252                  if (status != MI_ERR)
 253                  {    status = MI_OK;    }
 254              }
 255              
 256              if (status == MI_OK)
 257              {
 258                  ucComMF522Buf[0] = PICC_TRANSFER;
 259                  ucComMF522Buf[1] = addr;
 260                  CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]); 
 261             
 262                  status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 263          
 264                  if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 265                  {   status = MI_ERR;   }
 266              }
 267              return status;
 268          }
 269          
 270          /////////////////////////////////////////////////////////////////////
 271          //功    能：备份钱包
 272          //参数说明: sourceaddr[IN]：源地址
 273          //          goaladdr[IN]：目标地址
 274          //返    回: 成功返回MI_OK
 275          /////////////////////////////////////////////////////////////////////
 276          char PcdBakValue(unsigned char sourceaddr, unsigned char goaladdr)
 277          {
 278              char status;
 279              unsigned int  unLen;
 280              unsigned char ucComMF522Buf[MAXRLEN]; 
 281          
 282              ucComMF522Buf[0] = PICC_RESTORE;
 283              ucComMF522Buf[1] = sourceaddr;
 284              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 285           
 286              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 287          
 288              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 289              {   status = MI_ERR;   }
 290              
 291              if (status == MI_OK)
 292              {
 293                  ucComMF522Buf[0] = 0;
 294                  ucComMF522Buf[1] = 0;
 295                  ucComMF522Buf[2] = 0;
 296                  ucComMF522Buf[3] = 0;
 297                  CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 298           
 299                  status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 300                  if (status != MI_ERR)
 301                  {    status = MI_OK;    }
 302              }
 303              
C51 COMPILER V9.01   RC522                                                                 06/02/2017 08:42:48 PAGE 6   

 304              if (status != MI_OK)
 305              {    return MI_ERR;   }
 306              
 307              ucComMF522Buf[0] = PICC_TRANSFER;
 308              ucComMF522Buf[1] = goaladdr;
 309          
 310              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 311           
 312              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 313          
 314              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 315              {   status = MI_ERR;   }
 316          
 317              return status;
 318          }
 319          
 320          */
 321          /////////////////////////////////////////////////////////////////////
 322          //功    能：命令卡片进入休眠状态
 323          //返    回: 成功返回MI_OK
 324          /////////////////////////////////////////////////////////////////////
 325          char PcdHalt(void)
 326          {
 327   1          char status;
 328   1          unsigned int  unLen;
 329   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 330   1      
 331   1          ucComMF522Buf[0] = PICC_HALT;
 332   1          ucComMF522Buf[1] = 0;
 333   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 334   1       
 335   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 336   1      
 337   1          return MI_OK;
 338   1      }
 339          
 340          /////////////////////////////////////////////////////////////////////
 341          //用MF522计算CRC16函数
 342          /////////////////////////////////////////////////////////////////////
 343          void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
 344          {
 345   1          unsigned char i,n;
 346   1          ClearBitMask(DivIrqReg,0x04);
 347   1          WriteRawRC(CommandReg,PCD_IDLE);
 348   1          SetBitMask(FIFOLevelReg,0x80);
 349   1          for (i=0; i<len; i++)
 350   1          {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
 351   1          WriteRawRC(CommandReg, PCD_CALCCRC);
 352   1          i = 0xFF;
 353   1          do 
 354   1          {
 355   2              n = ReadRawRC(DivIrqReg);
 356   2              i--;
 357   2          }
 358   1          while ((i!=0) && !(n&0x04));
 359   1          pOutData[0] = ReadRawRC(CRCResultRegL);
 360   1          pOutData[1] = ReadRawRC(CRCResultRegM);
 361   1      }
 362          
 363          /////////////////////////////////////////////////////////////////////
 364          //功    能：复位RC522
 365          //返    回: 成功返回MI_OK
C51 COMPILER V9.01   RC522                                                                 06/02/2017 08:42:48 PAGE 7   

 366          /////////////////////////////////////////////////////////////////////
 367          char PcdReset(void)
 368          {
 369   1              //unsigned char i;
 370   1          MF522_RST=1;
 371   1      
 372   1                      _nop_();                  
 373   1      
 374   1          MF522_RST=0;
 375   1      
 376   1                      _nop_();                   
 377   1      
 378   1          MF522_RST=1;
 379   1      
 380   1                      _nop_();                 
 381   1              
 382   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
 383   1      
 384   1                      _nop_();                  
 385   1              
 386   1          
 387   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363
 388   1          WriteRawRC(TReloadRegL,30);           
 389   1          WriteRawRC(TReloadRegH,0);
 390   1          WriteRawRC(TModeReg,0x8D);
 391   1          WriteRawRC(TPrescalerReg,0x3E);
 392   1         WriteRawRC(TxAutoReg,0x40);
 393   1          return MI_OK;
 394   1      }
 395          
 396          /////////////////////////////////////////////////////////////////////
 397          //功    能：读RC632寄存器
 398          //参数说明：Address[IN]:寄存器地址
 399          //返    回：读出的值
 400          /////////////////////////////////////////////////////////////////////
 401          unsigned char ReadRawRC(unsigned char Address)
 402          {
 403   1           unsigned char i, ucAddr;
 404   1           unsigned char ucResult=0;
 405   1      
 406   1           MF522_SCK = 0;
 407   1           MF522_NSS = 0;
 408   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 409   1      
 410   1           for(i=8;i>0;i--)
 411   1           {
 412   2               MF522_SI = ((ucAddr&0x80)==0x80);
 413   2               MF522_SCK = 1;
 414   2               ucAddr <<= 1;
 415   2               MF522_SCK = 0;
 416   2           }
 417   1      
 418   1           for(i=8;i>0;i--)
 419   1           {
 420   2               MF522_SCK = 1;
 421   2               ucResult <<= 1;
 422   2               ucResult|=(bit)MF522_SO;
 423   2               MF522_SCK = 0;
 424   2           }
 425   1      
 426   1           MF522_NSS = 1;
 427   1           MF522_SCK = 1;
C51 COMPILER V9.01   RC522                                                                 06/02/2017 08:42:48 PAGE 8   

 428   1           return ucResult;
 429   1      }
 430          
 431          /////////////////////////////////////////////////////////////////////
 432          //功    能：写RC632寄存器
 433          //参数说明：Address[IN]:寄存器地址
 434          //          value[IN]:写入的值
 435          /////////////////////////////////////////////////////////////////////
 436          void WriteRawRC(unsigned char Address, unsigned char value)
 437          {  
 438   1          unsigned char i, ucAddr;
 439   1      
 440   1          MF522_SCK = 0;
 441   1          MF522_NSS = 0;
 442   1          ucAddr = ((Address<<1)&0x7E);
 443   1      
 444   1          for(i=8;i>0;i--)
 445   1          {
 446   2              MF522_SI = ((ucAddr&0x80)==0x80);
 447   2              MF522_SCK = 1;
 448   2              ucAddr <<= 1;
 449   2              MF522_SCK = 0;
 450   2          }
 451   1      
 452   1          for(i=8;i>0;i--)
 453   1          {
 454   2              MF522_SI = ((value&0x80)==0x80);
 455   2              MF522_SCK = 1;
 456   2              value <<= 1;
 457   2              MF522_SCK = 0;
 458   2          }
 459   1          MF522_NSS = 1;
 460   1          MF522_SCK = 1;
 461   1      }
 462          
 463          /////////////////////////////////////////////////////////////////////
 464          //功    能：置RC522寄存器位
 465          //参数说明：reg[IN]:寄存器地址
 466          //          mask[IN]:置位值
 467          /////////////////////////////////////////////////////////////////////
 468          void SetBitMask(unsigned char reg,unsigned char mask)  
 469          {
 470   1          char tmp = 0x0;
 471   1          tmp = ReadRawRC(reg);
 472   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 473   1      }
 474          
 475          /////////////////////////////////////////////////////////////////////
 476          //功    能：清RC522寄存器位
 477          //参数说明：reg[IN]:寄存器地址
 478          //          mask[IN]:清位值
 479          /////////////////////////////////////////////////////////////////////
 480          void ClearBitMask(unsigned char reg,unsigned char mask)  
 481          {
 482   1          char tmp = 0x0;
 483   1          tmp = ReadRawRC(reg);
 484   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 485   1      } 
 486          
 487          /////////////////////////////////////////////////////////////////////
 488          //功    能：通过RC522和ISO14443卡通讯
 489          //参数说明：Command[IN]:RC522命令字
C51 COMPILER V9.01   RC522                                                                 06/02/2017 08:42:48 PAGE 9   

 490          //          pInData[IN]:通过RC522发送到卡片的数据
 491          //          InLenByte[IN]:发送数据的字节长度
 492          //          pOutData[OUT]:接收到的卡片返回数据
 493          //          *pOutLenBit[OUT]:返回数据的位长度
 494          /////////////////////////////////////////////////////////////////////
 495          char PcdComMF522(unsigned char Command, 
 496                           unsigned char *pInData, 
 497                           unsigned char InLenByte,
 498                           unsigned char *pOutData, 
 499                           unsigned int  *pOutLenBit)
 500          {
 501   1          char status = MI_ERR;
 502   1          unsigned char irqEn   = 0x00;
 503   1          unsigned char waitFor = 0x00;
 504   1          unsigned char lastBits;
 505   1          unsigned char n;
 506   1          unsigned int i;
 507   1          switch (Command)
 508   1          {
 509   2             case PCD_AUTHENT:
 510   2                irqEn   = 0x12;
 511   2                waitFor = 0x10;
 512   2                break;
 513   2             case PCD_TRANSCEIVE:
 514   2                irqEn   = 0x77;
 515   2                waitFor = 0x30;
 516   2                break;
 517   2             default:
 518   2               break;
 519   2          }
 520   1         
 521   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 522   1          ClearBitMask(ComIrqReg,0x80);
 523   1          WriteRawRC(CommandReg,PCD_IDLE);
 524   1          SetBitMask(FIFOLevelReg,0x80);
 525   1          
 526   1          for (i=0; i<InLenByte; i++)
 527   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 528   1          WriteRawRC(CommandReg, Command);
 529   1         
 530   1          
 531   1          if (Command == PCD_TRANSCEIVE)
 532   1          {    SetBitMask(BitFramingReg,0x80);  }
 533   1          
 534   1          i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 535   1          do 
 536   1          {
 537   2               n = ReadRawRC(ComIrqReg);
 538   2               i--;
 539   2          }
 540   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 541   1          ClearBitMask(BitFramingReg,0x80);
 542   1                    
 543   1          if (i!=0)
 544   1          {    
 545   2               if(!(ReadRawRC(ErrorReg)&0x1B))
 546   2               {
 547   3                   status = MI_OK;
 548   3                   if (n & irqEn & 0x01)
 549   3                   {   status = MI_NOTAGERR;   }
 550   3                   if (Command == PCD_TRANSCEIVE)
 551   3                   {
C51 COMPILER V9.01   RC522                                                                 06/02/2017 08:42:48 PAGE 10  

 552   4                      n = ReadRawRC(FIFOLevelReg);
 553   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 554   4                      if (lastBits)
 555   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
 556   4                      else
 557   4                      {   *pOutLenBit = n*8;   }
 558   4                      if (n == 0)
 559   4                      {   n = 1;    }
 560   4                      if (n > MAXRLEN)
 561   4                      {   n = MAXRLEN;   }
 562   4                      for (i=0; i<n; i++)
 563   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 564   4                  }
 565   3               }
 566   2               else
 567   2               {   status = MI_ERR;   }
 568   2              
 569   2         }
 570   1         
 571   1      
 572   1         SetBitMask(ControlReg,0x80);           // stop timer now
 573   1         WriteRawRC(CommandReg,PCD_IDLE); 
 574   1         return status;
 575   1      }
 576          
 577          
 578          /////////////////////////////////////////////////////////////////////
 579          //开启天线  
 580          //每次启动或关闭天险发射之间应至少有1ms的间隔
 581          /////////////////////////////////////////////////////////////////////
 582          void PcdAntennaOn()
 583          {
 584   1          unsigned char i;
 585   1          i = ReadRawRC(TxControlReg);
 586   1          if (!(i & 0x03))
 587   1          {
 588   2              SetBitMask(TxControlReg, 0x03);
 589   2          }
 590   1      }
 591          
 592          
 593          /////////////////////////////////////////////////////////////////////
 594          //关闭天线
 595          /////////////////////////////////////////////////////////////////////
 596          void PcdAntennaOff()
 597          {
 598   1          ClearBitMask(TxControlReg, 0x03);
 599   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1838    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     164
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
